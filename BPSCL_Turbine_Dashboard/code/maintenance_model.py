# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14xTs07LJAZzMooEDq2ua7tbgrhPy2qKa
"""

!pip install openpyxl seaborn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

df = pd.read_excel("/content/Clean_BPSCL_Data.xlsx")
df.head()

print("Shape of Data:", df.shape)
df.info()
df.describe()

df.isnull().sum()

plt.figure(figsize=(8,5))
sns.scatterplot(x='Load_MW', y='Temp_C', data=df, hue='Unit_ID')
plt.title("Turbine Load vs Temperature")
plt.show()
#operation stress jane ke liye mtlb {more load + temp = more maintenance}

plt.figure(figsize=(6,4))
sns.boxplot(x='Maintenance', y='Vibration_mm_s', data=df)
plt.title("Vibration Level vs Maintenance")
plt.show()
# need maintenance = more vibrations

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
#T1=0, T2=1 ....{labelencoder lib}

# Convert Maintenance column to 0/1 mtlb maintenance hua ya nahi
df['Maintenance'] = df['Maintenance'].map({'Yes': 1, 'No': 0})

# Encode Unit_ID (T1, T2, T3 → 0,1,2)
le = LabelEncoder()
df['Unit_ID'] = le.fit_transform(df['Unit_ID'])

X = df[['Load_MW', 'Pressure_Bar', 'Vibration_mm_s', 'Temp_C', 'Unit_ID']]
#X contains the features (inputs) that we think affect maintenance.
y = df['Maintenance']

# test karne ke liye 20% baki 80% train karne ke liye
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
#Model ka prediction test kiya gaya — kitna sahi bola, wo confusion matrix aur accuracy se pata chala

.# Predict for all rows
df['Predicted_Maintenance'] = model.predict(X)

# Convert predictions back to Yes/No
df['Predicted_Maintenance'] = df['Predicted_Maintenance'].map({1: 'Yes', 0: 'No'})

# Save to Excel
df.to_excel("BPSCL_With_Predictions.xlsx", index=False)
#Poore turbine data ke liye prediction liya, "Yes/No" me convert karke Excel me save kiya — Power BI me use karne ke liye

